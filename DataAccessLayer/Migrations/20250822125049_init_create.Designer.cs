// <auto-generated />
using System;
using DataAccessLayer.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20250822125049_init_create")]
    partial class init_create
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EntityLayer.Concrete.Intersection", b =>
                {
                    b.Property<int>("IntersectionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntersectionID"));

                    b.Property<string>("BondedOrganisation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CamCount")
                        .HasColumnType("int");

                    b.Property<string>("CpuHex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeviceType")
                        .HasColumnType("int");

                    b.Property<string>("DriverHex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GroupCount")
                        .HasColumnType("int");

                    b.Property<bool>("IntersectionStatus")
                        .HasColumnType("bit");

                    b.Property<int>("KkcID")
                        .HasColumnType("int");

                    b.Property<int?>("LoopCount")
                        .HasColumnType("int");

                    b.Property<bool>("PedButton")
                        .HasColumnType("bit");

                    b.Property<string>("RoadName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UPS")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("IntersectionID");

                    b.HasIndex("UserID");

                    b.ToTable("Intersections");
                });

            modelBuilder.Entity("EntityLayer.Concrete.IntersectionChangeRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChangeType")
                        .HasColumnType("int");

                    b.Property<int?>("IntersectionID")
                        .HasColumnType("int");

                    b.Property<string>("PayloadJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("ReviewNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReviewedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SnapshotUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestedByUserId");

                    b.HasIndex("ReviewedByUserId");

                    b.HasIndex("IntersectionID", "Status")
                        .IsUnique()
                        .HasFilter("[IntersectionID] IS NOT NULL AND [Status] = 0");

                    b.ToTable("IntersectionChangeRequest");
                });

            modelBuilder.Entity("EntityLayer.Concrete.IntersectionImage", b =>
                {
                    b.Property<int>("ImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageID"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ImageStatus")
                        .HasColumnType("bit");

                    b.Property<int>("IntersectionID")
                        .HasColumnType("int");

                    b.HasKey("ImageID");

                    b.HasIndex("IntersectionID");

                    b.ToTable("IntersectionsImages");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IntersectionID")
                        .HasColumnType("int");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationID");

                    b.HasIndex("IntersectionID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Report", b =>
                {
                    b.Property<int>("ReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportID"));

                    b.Property<int>("IntersectionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ReportID");

                    b.HasIndex("IntersectionID");

                    b.HasIndex("UserID");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Substructure", b =>
                {
                    b.Property<int>("SubstructureID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubstructureID"));

                    b.Property<int>("IntersectionID")
                        .HasColumnType("int");

                    b.Property<string>("SubstructureBuilder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubstructureFinishDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubstructureStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SubstructureID");

                    b.HasIndex("IntersectionID")
                        .IsUnique();

                    b.ToTable("Substructures");
                });

            modelBuilder.Entity("EntityLayer.Concrete.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Intersection", b =>
                {
                    b.HasOne("EntityLayer.Concrete.User", "User")
                        .WithMany("Intersections")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityLayer.Concrete.IntersectionChangeRequest", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Intersection", "Intersection")
                        .WithMany()
                        .HasForeignKey("IntersectionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EntityLayer.Concrete.User", "RequestedBy")
                        .WithMany()
                        .HasForeignKey("RequestedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.User", "ReviewedBy")
                        .WithMany()
                        .HasForeignKey("ReviewedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Intersection");

                    b.Navigation("RequestedBy");

                    b.Navigation("ReviewedBy");
                });

            modelBuilder.Entity("EntityLayer.Concrete.IntersectionImage", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Intersection", "intersection")
                        .WithMany("IntersectionImages")
                        .HasForeignKey("IntersectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("intersection");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Location", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Intersection", "intersection")
                        .WithMany("Locations")
                        .HasForeignKey("IntersectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("intersection");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Report", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Intersection", "intersection")
                        .WithMany("Reports")
                        .HasForeignKey("IntersectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.User", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");

                    b.Navigation("intersection");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Substructure", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Intersection", "intersection")
                        .WithOne("Substructure")
                        .HasForeignKey("EntityLayer.Concrete.Substructure", "IntersectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("intersection");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Intersection", b =>
                {
                    b.Navigation("IntersectionImages");

                    b.Navigation("Locations");

                    b.Navigation("Reports");

                    b.Navigation("Substructure")
                        .IsRequired();
                });

            modelBuilder.Entity("EntityLayer.Concrete.User", b =>
                {
                    b.Navigation("Intersections");

                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
